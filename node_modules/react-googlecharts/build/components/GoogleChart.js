'use strict';

Object.defineProperty(exports, '__esModule', {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _libGoogleChartsLoader = require('../lib/GoogleChartsLoader');

var _libGoogleChartsLoader2 = _interopRequireDefault(_libGoogleChartsLoader);

var GoogleChart = (function (_React$Component) {
	_inherits(GoogleChart, _React$Component);

	function GoogleChart() {
		_classCallCheck(this, GoogleChart);

		_get(Object.getPrototypeOf(GoogleChart.prototype), 'constructor', this).call(this);
		this.state = {
			chart: null
		};
	}

	_createClass(GoogleChart, [{
		key: 'handleResize',
		value: function handleResize() {
			var _this = this;

			if (this.resizeTimer) clearTimeout(this.resizeTimer);
			this.resizeTimer = setTimeout(function () {
				return _this.drawChart();
			}, 100);
		}
	}, {
		key: 'hasData',
		value: function hasData() {
			return this.props.data && this.props.data.length > 0;
		}
	}, {
		key: 'createChart',
		value: function createChart() {
			if (!this.hasData() || !this.google) return;

			console.log('create:' + this.props.type);

			var node = _react2['default'].findDOMNode(this.refs.chart);
			var charts = this.google.visualization;
			var chart = null;
			switch (this.props.type) {
				// Material charts
				case 'material-bar':
				case 'material-column':
					chart = new google.charts.Bar(node);
					break;
				case 'material-line':
					chart = new google.charts.Line(node);
					break;
				case 'material-scatter':
					chart = new google.charts.Scatter(node);
					break;

				// Core charts package
				case 'area':
					chart = new charts.AreaChart(node);
					break;
				case 'bar':
					chart = new charts.BarChart(node);
					break;
				case 'bubble':
					chart = new charts.BubbleChart(node);
					break;
				case 'candlestick':
					chart = new charts.CandlestickChart(node);
					break;
				case 'column':
					chart = new charts.ColumnChart(node);
					break;
				case 'combo':
					chart = new charts.ComboChart(node);
					break;
				case 'geo':
					chart = new charts.GeoChart(node);
					break;
				case 'histogram':
					chart = new charts.Histogram(node);
					break;
				case 'line':
					chart = new charts.LineChart(node);
					break;
				case 'pie':
					chart = new charts.PieChart(node);
					break;
				case 'scatter':
					chart = new charts.ScatterChart(node);
					break;
				case 'sparkline':
					chart = new charts.SparklineChart(node);
					break;
				case 'stepped-area':
					chart = new charts.SteppedAreaChart(node);
					break;
			}

			if (chart) {
				this.setState({
					chart: chart
				});
			}
		}
	}, {
		key: 'drawChart',
		value: function drawChart() {
			if (!this.hasData() || !this.google || !this.state.chart) return;

			console.log('draw:' + this.props.type);

			var data = this.google.visualization.arrayToDataTable(this.props.data);

			var options = this.props.options;
			switch (this.props.type) {
				case 'material-line':
					options = this.google.charts.Line.convertOptions(options);
					break;
				case 'material-bar':
				case 'material-column':
					options = this.google.charts.Bar.convertOptions(options);
				case 'material-scatter':
					options = this.google.charts.Scatter.convertOptions(options);
			}

			this.state.chart.draw(data, options);
		}
	}, {
		key: 'clearChart',
		value: function clearChart() {
			if (!this.hasData() || !this.google || !this.state.chart) return;

			this.state.chart.clearChart();
		}

		//	shouldComponentUpdate(nextProps, nextState) {
		//		return nextState.chart !== this.state.chart || nextProps.data.length !== this.props.data.length;
		//	}

	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate() {
			if (!this.state.chart && this.google && this.hasData()) this.createChart();
			this.drawChart();
		}
	}, {
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this2 = this;

			this.loader = _libGoogleChartsLoader2['default'].load();

			this.loader.then(function (google) {
				_this2.google = google;
				_this2.createChart();
				_this2.drawChart();
			}, function (err) {
				console.log(err);
			});
			window.addEventListener('resize', function () {
				return _this2.handleResize();
			});
		}
	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			var _this3 = this;

			window.removeEventListener('resize', function () {
				return _this3.handleResize();
			});

			this.clearChart();
		}
	}, {
		key: 'render',
		value: function render() {
			if (this.hasData()) {
				return _react2['default'].createElement('div', { className: 'googlechart', ref: 'chart' });
			} else {
				return _react2['default'].createElement(
					'div',
					{ className: 'alert alert-danger' },
					'No Data'
				);
			}
		}
	}]);

	return GoogleChart;
})(_react2['default'].Component);

exports['default'] = GoogleChart;
module.exports = exports['default'];