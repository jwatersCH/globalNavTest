"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var GoogleChartsLoader = (function () {
	function GoogleChartsLoader() {
		_classCallCheck(this, GoogleChartsLoader);

		this._promise = false;
	}

	_createClass(GoogleChartsLoader, [{
		key: "load",
		value: function load() {
			var _this = this;

			if (!this._promise) {
				this._promise = new Promise(function (resolve, reject) {
					if (!window) reject("Can't load Google Charts, code not running in browser.");

					_this._injectScript(function () {
						if (_this._checkIfLoadedCorrectly()) {
							resolve(window.google);
						} else {
							reject(Error("Failed to load Google Charts"));
						}
					});
				});
			}

			return this._promise;
		}
	}, {
		key: "_injectScript",
		value: function _injectScript(callback) {
			var _this2 = this;

			var head = document.getElementsByTagName('head')[0];
			var script = document.createElement('script');

			script.setAttribute('type', 'text/javascript');
			//script.src = 'https://www.google.com/jsapi';
			script.src = 'https://www.gstatic.com/charts/loader.js';

			if (script.addEventListener) {
				// Standard browsers (including IE9+)
				script.addEventListener('load', function () {
					return _this2._loadLibraries(callback);
				}, false);
			} else {
				// IE8 and below
				script.onreadystatechange = function () {
					if (script.readyState === 'loaded' || script.readyState === 'complete') {
						script.onreadystatechange = null;
						this._loadLibraries(callback);
					}
				};
			}
			head.appendChild(script);
		}
	}, {
		key: "_loadLibraries",
		value: function _loadLibraries(callback) {
			window.google.charts.load('41', { packages: ['corechart', 'bar', 'line', 'scatter'] });
			window.google.charts.setOnLoadCallback(callback);
		}
	}, {
		key: "_checkIfLoadedCorrectly",
		value: function _checkIfLoadedCorrectly() {
			return typeof window.google === 'object' && typeof window.google.visualization === 'object' && typeof window.google.charts === 'object';
		}
	}]);

	return GoogleChartsLoader;
})();

;

exports["default"] = new GoogleChartsLoader();
module.exports = exports["default"];